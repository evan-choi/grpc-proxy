//HintName: Test.TestProxy.gen.cs
// <auto-generated>
//     Generated by the gRPC Proxy.  DO NOT EDIT!
//     service: a.b.c.d.Test
// </auto-generated>
using grpc = global::Grpc.Core;
using grpcProxy = global::Grpc.Proxy;

namespace Grpc.Proxy.Tests.Proto;

public static partial class Test
{
    static Test()
    {
        grpcProxy::GrpcProxyReflection.Add<TestProxy>(Descriptor);
    }

    public class TestProxy : TestBase, grpcProxy::IProxyService
    {
        private readonly grpcProxy::IProxyCallInvoker _invoker;

        public TestProxy(grpcProxy::IProxyCallInvoker callInvoker)
        {
            _invoker = callInvoker;
        }

        public override global::System.Threading.Tasks.Task<global::Grpc.Proxy.Tests.Proto.PongResponse> Ping(global::Grpc.Proxy.Tests.Proto.PingRequest request, grpc::ServerCallContext context)
        {
            return _invoker.UnaryCall(__Method_Ping, request, context);
        }

        public override global::System.Threading.Tasks.Task<global::Grpc.Proxy.Tests.Proto.PongResponse> PingClientStream(grpc::IAsyncStreamReader<global::Grpc.Proxy.Tests.Proto.PingRequest> requestStream, grpc::ServerCallContext context)
        {
            return _invoker.ClientStreamingCall(__Method_PingClientStream, requestStream, context);
        }

        public override global::System.Threading.Tasks.Task PingDuplexStream(grpc::IAsyncStreamReader<global::Grpc.Proxy.Tests.Proto.PingRequest> requestStream, grpc::IServerStreamWriter<global::Grpc.Proxy.Tests.Proto.PongResponse> responseStream, grpc::ServerCallContext context)
        {
            return _invoker.DuplexStreamingCall(__Method_PingDuplexStream, requestStream, responseStream, context);
        }

        public override global::System.Threading.Tasks.Task PingServerStream(global::Grpc.Proxy.Tests.Proto.PingRequest request, grpc::IServerStreamWriter<global::Grpc.Proxy.Tests.Proto.PongResponse> responseStream, grpc::ServerCallContext context)
        {
            return _invoker.ServerStreamingCall(__Method_PingServerStream, request, responseStream, context);
        }

    }
}
